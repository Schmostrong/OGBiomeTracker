package og.spigot.survival.biometracker.utils;

import og.spigot.survival.biometracker.main.OGBiomeTrackerMain;
import org.bukkit.Bukkit;
import org.bukkit.Material;
import org.bukkit.entity.Player;
import org.bukkit.inventory.Inventory;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.ItemMeta;

public class OGBiomeTrackerUtils {
    //Singleton instance of the Utils class
    public static OGBiomeTrackerUtils utils;

    private Inventory biomeTrackerInventory;
    private ItemStack biomeTrackerItem;
    private int locateWithin;
    private OGBiomeTrackerUtils(){
        ItemStack is = new ItemStack(Material.COMPASS);
        ItemMeta im = is.getItemMeta();
        im.setDisplayName("§2BiomeTracker");
        is.setItemMeta(im);
        this.biomeTrackerItem = is;
        this.locateWithin = 0;
    }

    //Return the singleton instance of the utils class
    //Create instance, if there is none initialized
    public static OGBiomeTrackerUtils getInstance(){
        if(utils == null)
            utils = new OGBiomeTrackerUtils();
        return utils;
    }

    /**
     * Function is used to build and open the custom BiomeTracker inventory
     */
    public void buildBiomeTrackerInventory(){
        this.biomeTrackerInventory = Bukkit.createInventory(null, 45, "BiomeTracker");

        //First set of items is set in second row
        //Set item for Oak forest biome
        biomeTrackerInventory.setItem(1, createItemStackWithName(Material.OAK_WOOD, "§2OAK FOREST"));

        //Set item for Birch Forest biome
        biomeTrackerInventory.setItem(3, createItemStackWithName(Material.BIRCH_WOOD, "§2BIRCH FOREST"));

        //Set item for Dark Oak Forest biome
        biomeTrackerInventory.setItem(5, createItemStackWithName(Material.DARK_OAK_WOOD, "§2DARK OAK FOREST"));

        //Set item for Spruce Forest biome
        biomeTrackerInventory.setItem(7, createItemStackWithName(Material.SPRUCE_WOOD, "§2SPRUCE FOREST"));

        //Second set of items is set in fourth row
        //Set item for Jungle biome
        biomeTrackerInventory.setItem(19, createItemStackWithName(Material.JUNGLE_WOOD, "§2JUNGLE"));

        //Set item for desert biome
        biomeTrackerInventory.setItem(21, createItemStackWithName(Material.SANDSTONE, "§eDESERT"));

        //Set item for savannah biome
        biomeTrackerInventory.setItem(23, createItemStackWithName(Material.ACACIA_WOOD, "§eSAVANNAH"));

        //Set item for badlands biome
        biomeTrackerInventory.setItem(25, createItemStackWithName(Material.RED_SANDSTONE, "§eOLDLANDS"));

        //Third set of items is set in sixth row
        //Set item for ice biome
        biomeTrackerInventory.setItem(37, createItemStackWithName(Material.ICE, "§3ICE SPIKES"));

        //Set item for mushroom biome
        biomeTrackerInventory.setItem(39, createItemStackWithName(Material.RED_MUSHROOM_BLOCK, "§4MUSHROOM FOREST"));

        //Set item for ocean biome
        biomeTrackerInventory.setItem(41, createItemStackWithName(Material.WATER_BUCKET, "§3OCEAN"));

        //Set item for swamp biome
        biomeTrackerInventory.setItem(43, createItemStackWithName(Material.VINE, "§2SWAMP"));
    }

    /**
     * Function is used to create an ItemStack based on the given material and displayName
     *
     * @param itemMaterial - The material the ItemStack should consist of
     * @param displayName - The DisplayName of the ItemStack
     * @return - ItemStack object generated by this function
     */
    public ItemStack createItemStackWithName(Material itemMaterial, String displayName){
        ItemStack itemStack = new ItemStack(itemMaterial);
        ItemMeta itemMeta = itemStack.getItemMeta();
        itemMeta.setDisplayName(displayName);
        itemStack.setItemMeta(itemMeta);
        return itemStack;
    }

    /**
     * Function returns the centralized BiomeTracker inventory that is built on plugin startup
     *
     * @return - Inventory object that holds the BiomeTracker inventory
     */
    public Inventory getBiomeTrackerInventory() {
        return biomeTrackerInventory;
    }

    /**
     * Function returns the BiomTracker ItemStack
     *
     * @return - ItemStack that holds the blueprint for the BiomeTracker
     */
    public ItemStack getBiomeTrackerItem(){
        return this.biomeTrackerItem;
    }

    /**
     * Sets the amount of blocks in every direction that should be queried for the destination biome
     *
     * @param locateWithin - Integer representing the number of the blocks
     */
    public void setLocateWithin(int locateWithin) {
        this.locateWithin = locateWithin;
    }

    /**
     * Returns the amount of blocks in every direction that should be queried for the destination biome

     * @return - Integer representing the number of the blocks
     */
    public int getLocateWithin() {
        return locateWithin;
    }
}
